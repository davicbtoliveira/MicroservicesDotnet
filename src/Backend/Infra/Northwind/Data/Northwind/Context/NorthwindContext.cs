// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Northwind.Data.Northwind.Entity;

namespace Northwind.Data.Northwind.Context;

public partial class NorthwindContext : DbContext
{
public NorthwindContext()
{
}

public NorthwindContext(DbContextOptions<NorthwindContext> options)
    : base(options)
{
}

public virtual DbSet<AutoHistory> AutoHistory { get; set; }

public virtual DbSet<Categories> Categories { get; set; }

public virtual DbSet<CertificadosDigitais> CertificadosDigitais { get; set; }

public virtual DbSet<CustomerDemographics> CustomerDemographics { get; set; }

public virtual DbSet<Customers> Customers { get; set; }

public virtual DbSet<Documentos> Documentos { get; set; }

public virtual DbSet<Employees> Employees { get; set; }

public virtual DbSet<EmployeesDocuments> EmployeesDocuments { get; set; }

public virtual DbSet<EquipeTecnica> EquipeTecnica { get; set; }

public virtual DbSet<HistoricoAssinaturas> HistoricoAssinaturas { get; set; }

public virtual DbSet<Manuais> Manuais { get; set; }

public virtual DbSet<Mensagens> Mensagens { get; set; }

public virtual DbSet<Notificacao> Notificacao { get; set; }

public virtual DbSet<NotificacaoDemandante> NotificacaoDemandante { get; set; }

public virtual DbSet<NotificacaoRequerente> NotificacaoRequerente { get; set; }

public virtual DbSet<Order_Details> Order_Details { get; set; }

public virtual DbSet<Orders> Orders { get; set; }

public virtual DbSet<Products> Products { get; set; }

public virtual DbSet<Region> Region { get; set; }

public virtual DbSet<RequestResponseLogger> RequestResponseLogger { get; set; }

public virtual DbSet<SQLSessions> SQLSessions { get; set; }

public virtual DbSet<Shippers> Shippers { get; set; }

public virtual DbSet<Sistema> Sistema { get; set; }

public virtual DbSet<Student> Student { get; set; }

public virtual DbSet<StudentAdress> StudentAdress { get; set; }

public virtual DbSet<Suppliers> Suppliers { get; set; }

public virtual DbSet<Territories> Territories { get; set; }

public virtual DbSet<TipoMensagens> TipoMensagens { get; set; }

protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
{
    if (!optionsBuilder.IsConfigured)
    {
        optionsBuilder.UseSqlServer("Data Source=172.24.64.1,1433;Initial Catalog=Northwind;Persist Security Info=True;User ID=sa;Password=Castell@2005;;Integrated Security=True;Trusted_Connection=false;Encrypt=False;");
    }
}
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<AutoHistory>(entity =>
    {
        entity.Property(e => e.AffectedColumns).IsUnicode(false);
        entity.Property(e => e.Changed).IsUnicode(false);
        entity.Property(e => e.Created).HasColumnType("datetime");
        entity.Property(e => e.Kind)
            .HasMaxLength(20)
            .IsUnicode(false);
        entity.Property(e => e.RowId).HasMaxLength(50);
        entity.Property(e => e.TableName)
            .HasMaxLength(50)
            .IsUnicode(false);
        entity.Property(e => e.UserId)
            .HasMaxLength(50)
            .IsUnicode(false);
    });

    modelBuilder.Entity<Categories>(entity =>
    {
        entity.HasKey(e => e.CategoryID);

        entity.HasIndex(e => e.CategoryName, "CategoryName");

        entity.Property(e => e.CategoryName)
            .IsRequired()
            .HasMaxLength(15);
        entity.Property(e => e.Description).HasColumnType("ntext");
        entity.Property(e => e.Picture).HasColumnType("image");
    });

    modelBuilder.Entity<CertificadosDigitais>(entity =>
    {
        entity.HasKey(e => e.Id).HasName("PK__Certific__3214EC075C5B9960");

        entity.Property(e => e.CN_Certificado).HasMaxLength(255);
        entity.Property(e => e.Certificado_Digital).IsRequired();
        entity.Property(e => e.Cpf_Cnpj)
            .IsRequired()
            .HasMaxLength(14);
        entity.Property(e => e.Data_Inclusao).HasColumnType("datetime");
        entity.Property(e => e.Login)
            .IsRequired()
            .HasMaxLength(255);
        entity.Property(e => e.Senha).IsRequired();
    });

    modelBuilder.Entity<CustomerDemographics>(entity =>
    {
        entity.HasKey(e => e.CustomerTypeID).IsClustered(false);

        entity.Property(e => e.CustomerTypeID)
            .HasMaxLength(10)
            .IsFixedLength();
        entity.Property(e => e.CustomerDesc).HasColumnType("ntext");
    });

    modelBuilder.Entity<Customers>(entity =>
    {
        entity.HasKey(e => e.CustomerID);

        entity.HasIndex(e => e.City, "City");

        entity.HasIndex(e => e.CompanyName, "CompanyName");

        entity.HasIndex(e => e.PostalCode, "PostalCode");

        entity.HasIndex(e => e.Region, "Region");

        entity.Property(e => e.CustomerID)
            .HasMaxLength(5)
            .IsFixedLength();
        entity.Property(e => e.Address).HasMaxLength(60);
        entity.Property(e => e.City).HasMaxLength(15);
        entity.Property(e => e.CompanyName)
            .IsRequired()
            .HasMaxLength(40);
        entity.Property(e => e.ContactName).HasMaxLength(30);
        entity.Property(e => e.ContactTitle).HasMaxLength(30);
        entity.Property(e => e.Country).HasMaxLength(15);
        entity.Property(e => e.Fax).HasMaxLength(24);
        entity.Property(e => e.Phone).HasMaxLength(24);
        entity.Property(e => e.PostalCode).HasMaxLength(10);
        entity.Property(e => e.Region).HasMaxLength(15);

        entity.HasMany(d => d.CustomerType).WithMany(p => p.Customer)
            .UsingEntity<Dictionary<string, object>>(
                "CustomerCustomerDemo",
                r => r.HasOne<CustomerDemographics>().WithMany()
                    .HasForeignKey("CustomerTypeID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerCustomerDemo"),
                l => l.HasOne<Customers>().WithMany()
                    .HasForeignKey("CustomerID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerCustomerDemo_Customers"),
                j =>
                {
                    j.HasKey("CustomerID", "CustomerTypeID").IsClustered(false);
                    j.IndexerProperty<string>("CustomerID")
                        .HasMaxLength(5)
                        .IsFixedLength();
                    j.IndexerProperty<string>("CustomerTypeID")
                        .HasMaxLength(10)
                        .IsFixedLength();
                });
    });

    modelBuilder.Entity<Documentos>(entity =>
    {
        entity.HasKey(e => e.DocumentoID);

        entity.Property(e => e.DataInclusao).HasColumnType("datetime");
        entity.Property(e => e.NomeArquivo)
            .IsRequired()
            .HasMaxLength(255)
            .IsUnicode(false);
        entity.Property(e => e.Url)
            .HasMaxLength(200)
            .IsUnicode(false);
    });

    modelBuilder.Entity<Employees>(entity =>
    {
        entity.HasKey(e => e.EmployeeID);

        entity.HasIndex(e => e.LastName, "LastName");

        entity.HasIndex(e => e.PostalCode, "PostalCode");

        entity.Property(e => e.Address).HasMaxLength(60);
        entity.Property(e => e.BirthDate).HasColumnType("datetime");
        entity.Property(e => e.City).HasMaxLength(15);
        entity.Property(e => e.Country).HasMaxLength(15);
        entity.Property(e => e.Extension).HasMaxLength(4);
        entity.Property(e => e.FirstName)
            .IsRequired()
            .HasMaxLength(10);
        entity.Property(e => e.HireDate).HasColumnType("datetime");
        entity.Property(e => e.HomePhone).HasMaxLength(24);
        entity.Property(e => e.LastName)
            .IsRequired()
            .HasMaxLength(20);
        entity.Property(e => e.Notes).HasColumnType("ntext");
        entity.Property(e => e.Photo).HasColumnType("image");
        entity.Property(e => e.PhotoFile)
            .HasMaxLength(100)
            .IsUnicode(false);
        entity.Property(e => e.PhotoPath).HasMaxLength(255);
        entity.Property(e => e.PostalCode).HasMaxLength(10);
        entity.Property(e => e.Region).HasMaxLength(15);
        entity.Property(e => e.Title).HasMaxLength(30);
        entity.Property(e => e.TitleOfCourtesy).HasMaxLength(25);

        entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation)
            .HasForeignKey(d => d.ReportsTo)
            .HasConstraintName("FK_Employees_Employees");

        entity.HasMany(d => d.Territory).WithMany(p => p.Employee)
            .UsingEntity<Dictionary<string, object>>(
                "EmployeeTerritories",
                r => r.HasOne<Territories>().WithMany()
                    .HasForeignKey("TerritoryID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTerritories_Territories"),
                l => l.HasOne<Employees>().WithMany()
                    .HasForeignKey("EmployeeID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTerritories_Employees"),
                j =>
                {
                    j.HasKey("EmployeeID", "TerritoryID").IsClustered(false);
                    j.IndexerProperty<string>("TerritoryID").HasMaxLength(20);
                });
    });

    modelBuilder.Entity<EmployeesDocuments>(entity =>
    {
        entity.HasKey(e => e.EmployeesDocumentsID).IsClustered(false);

        entity.HasIndex(e => e.EmployeeID, "IX_EmployeesDocuments_EmployeeID");

        entity.Property(e => e.DocumentName)
            .IsRequired()
            .IsUnicode(false);
        entity.Property(e => e.DocumentPath)
            .IsRequired()
            .IsUnicode(false);

        entity.HasOne(d => d.Employee).WithMany(p => p.EmployeesDocuments)
            .HasForeignKey(d => d.EmployeeID)
            .OnDelete(DeleteBehavior.ClientSetNull);
    });

    modelBuilder.Entity<EquipeTecnica>(entity =>
    {
        entity.HasKey(e => e.UserID);

        entity.Property(e => e.Cargo)
            .HasMaxLength(50)
            .IsUnicode(false);
        entity.Property(e => e.Celular)
            .HasMaxLength(50)
            .IsUnicode(false);
        entity.Property(e => e.EmailOrganizacao)
            .IsRequired()
            .HasMaxLength(100)
            .IsUnicode(false);
        entity.Property(e => e.EmailPessoal)
            .IsRequired()
            .HasMaxLength(100)
            .IsUnicode(false);
        entity.Property(e => e.LoginID)
            .HasMaxLength(50)
            .IsUnicode(false);
        entity.Property(e => e.Nome)
            .IsRequired()
            .HasMaxLength(50)
            .IsUnicode(false);
        entity.Property(e => e.SobreNome)
            .HasMaxLength(50)
            .IsUnicode(false);
    });

    modelBuilder.Entity<HistoricoAssinaturas>(entity =>
    {
        entity.HasKey(e => e.Id).HasName("PK__Historic__3214EC072483DDF0");

        entity.Property(e => e.Data).HasColumnType("datetime");
        entity.Property(e => e.Login)
            .IsRequired()
            .HasMaxLength(255);

        entity.HasOne(d => d.Id_Certificado_DigitalNavigation).WithMany(p => p.HistoricoAssinaturas)
            .HasForeignKey(d => d.Id_Certificado_Digital)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Historico_Assinaturas_Certificados_Digitais");
    });

    modelBuilder.Entity<Manuais>(entity =>
    {
        entity.HasKey(e => e.ManualID).HasName("PK__Manuais__5DDB002667BC84E4");

        entity.Property(e => e.DataInclusao).HasColumnType("datetime");
        entity.Property(e => e.Descricao).HasColumnType("text");
        entity.Property(e => e.Tipo)
            .IsRequired()
            .HasMaxLength(100)
            .IsUnicode(false);
        entity.Property(e => e.Titulo)
            .HasMaxLength(255)
            .IsUnicode(false);

        entity.HasOne(d => d.Documento).WithMany(p => p.Manuais)
            .HasForeignKey(d => d.DocumentoID)
            .HasConstraintName("FK__Manuais__Documen__2739D489");
    });

    modelBuilder.Entity<Mensagens>(entity =>
    {
        entity.Property(e => e.Assunto)
            .IsRequired()
            .HasMaxLength(255);
        entity.Property(e => e.DataEnvio).HasColumnType("datetime");
        entity.Property(e => e.DataInclusao).HasColumnType("datetime");
        entity.Property(e => e.DataLeitura).HasColumnType("datetime");
        entity.Property(e => e.DeUsuario).HasMaxLength(50);
        entity.Property(e => e.HistoryID)
            .IsRequired()
            .HasMaxLength(50);
        entity.Property(e => e.Mensagem).IsRequired();
        entity.Property(e => e.MensagensParametros).HasMaxLength(50);
        entity.Property(e => e.ParameterSistemaID).HasMaxLength(50);
        entity.Property(e => e.Perfil).HasMaxLength(50);
        entity.Property(e => e.Sistema).HasMaxLength(50);

        entity.HasOne(d => d.TipoMensagens).WithMany(p => p.Mensagens)
            .HasForeignKey(d => d.TipoMensagensID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Mensagens_TipoMensagens");

        entity.HasMany(d => d.Documento).WithMany(p => p.Mensagem)
            .UsingEntity<Dictionary<string, object>>(
                "MensagemDocumento",
                r => r.HasOne<Documentos>().WithMany()
                    .HasForeignKey("DocumentoID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MensagemDocumento_Documentos"),
                l => l.HasOne<Mensagens>().WithMany()
                    .HasForeignKey("MensagemID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MensagemDocumento_Mensagens"),
                j =>
                {
                    j.HasKey("MensagemID", "DocumentoID");
                });
    });

    modelBuilder.Entity<Notificacao>(entity =>
    {
        entity.HasKey(e => e.ID).HasName("PK__Notifica__3214EC27059F2040");

        entity.Property(e => e.Data).HasColumnType("datetime");
        entity.Property(e => e.Status).HasMaxLength(50);
        entity.Property(e => e.TipoNotificacao).HasMaxLength(255);
        entity.Property(e => e.Titulo).HasMaxLength(255);

        entity.HasOne(d => d.Demandante).WithMany(p => p.Notificacao)
            .HasForeignKey(d => d.DemandanteID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Notificacao_Demandante");

        entity.HasOne(d => d.Requerente).WithMany(p => p.Notificacao)
            .HasForeignKey(d => d.RequerenteID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Notificacao_Requerente");
    });

    modelBuilder.Entity<NotificacaoDemandante>(entity =>
    {
        entity.HasKey(e => e.ID).HasName("PK__Notifica__3214EC27E88B82CA");

        entity.Property(e => e.Email).HasMaxLength(255);
        entity.Property(e => e.Equipe).HasMaxLength(255);
        entity.Property(e => e.Usuario)
            .IsRequired()
            .HasMaxLength(255);
    });

    modelBuilder.Entity<NotificacaoRequerente>(entity =>
    {
        entity.HasKey(e => e.ID).HasName("PK__Notifica__3214EC27FB6F621F");

        entity.Property(e => e.Email).HasMaxLength(255);
        entity.Property(e => e.Equipe).HasMaxLength(255);
        entity.Property(e => e.NomeUsuario).HasMaxLength(255);
        entity.Property(e => e.TipoRequerente)
            .IsRequired()
            .HasMaxLength(255);
        entity.Property(e => e.Usuario).HasMaxLength(255);
    });

    modelBuilder.Entity<Order_Details>(entity =>
    {
        entity.HasKey(e => new { e.OrderID, e.ProductID }).HasName("PK_Order_Details");

        entity.ToTable("Order Details");

        entity.HasIndex(e => e.OrderID, "OrderID");

        entity.HasIndex(e => e.OrderID, "OrdersOrder_Details");

        entity.HasIndex(e => e.ProductID, "ProductID");

        entity.HasIndex(e => e.ProductID, "ProductsOrder_Details");

        entity.Property(e => e.Quantity).HasDefaultValue((short)1);
        entity.Property(e => e.UnitPrice).HasColumnType("money");

        entity.HasOne(d => d.Order).WithMany(p => p.Order_Details)
            .HasForeignKey(d => d.OrderID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Order_Details_Orders");

        entity.HasOne(d => d.Product).WithMany(p => p.Order_Details)
            .HasForeignKey(d => d.ProductID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Order_Details_Products");
    });

    modelBuilder.Entity<Orders>(entity =>
    {
        entity.HasKey(e => e.OrderID);

        entity.HasIndex(e => e.CustomerID, "CustomerID");

        entity.HasIndex(e => e.CustomerID, "CustomersOrders");

        entity.HasIndex(e => e.EmployeeID, "EmployeeID");

        entity.HasIndex(e => e.EmployeeID, "EmployeesOrders");

        entity.HasIndex(e => e.OrderDate, "OrderDate");

        entity.HasIndex(e => e.ShipPostalCode, "ShipPostalCode");

        entity.HasIndex(e => e.ShippedDate, "ShippedDate");

        entity.HasIndex(e => e.ShipVia, "ShippersOrders");

        entity.Property(e => e.CustomerID)
            .HasMaxLength(5)
            .IsFixedLength();
        entity.Property(e => e.Freight)
            .HasDefaultValue(0m)
            .HasColumnType("money");
        entity.Property(e => e.OrderDate).HasColumnType("datetime");
        entity.Property(e => e.RequiredDate).HasColumnType("datetime");
        entity.Property(e => e.ShipAddress).HasMaxLength(60);
        entity.Property(e => e.ShipCity).HasMaxLength(15);
        entity.Property(e => e.ShipCountry).HasMaxLength(15);
        entity.Property(e => e.ShipName).HasMaxLength(40);
        entity.Property(e => e.ShipPostalCode).HasMaxLength(10);
        entity.Property(e => e.ShipRegion).HasMaxLength(15);
        entity.Property(e => e.ShippedDate).HasColumnType("datetime");

        entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
            .HasForeignKey(d => d.CustomerID)
            .HasConstraintName("FK_Orders_Customers");

        entity.HasOne(d => d.Employee).WithMany(p => p.Orders)
            .HasForeignKey(d => d.EmployeeID)
            .HasConstraintName("FK_Orders_Employees");

        entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Orders)
            .HasForeignKey(d => d.ShipVia)
            .HasConstraintName("FK_Orders_Shippers");
    });

    modelBuilder.Entity<Products>(entity =>
    {
        entity.HasKey(e => e.ProductID);

        entity.HasIndex(e => e.CategoryID, "CategoriesProducts");

        entity.HasIndex(e => e.CategoryID, "CategoryID");

        entity.HasIndex(e => e.ProductName, "ProductName");

        entity.HasIndex(e => e.SupplierID, "SupplierID");

        entity.HasIndex(e => e.SupplierID, "SuppliersProducts");

        entity.Property(e => e.ProductName)
            .IsRequired()
            .HasMaxLength(40);
        entity.Property(e => e.QuantityPerUnit).HasMaxLength(20);
        entity.Property(e => e.ReorderLevel).HasDefaultValue((short)0);
        entity.Property(e => e.UnitPrice)
            .HasDefaultValue(0m)
            .HasColumnType("money");
        entity.Property(e => e.UnitsInStock).HasDefaultValue((short)0);
        entity.Property(e => e.UnitsOnOrder).HasDefaultValue((short)0);

        entity.HasOne(d => d.Category).WithMany(p => p.Products)
            .HasForeignKey(d => d.CategoryID)
            .HasConstraintName("FK_Products_Categories");

        entity.HasOne(d => d.Supplier).WithMany(p => p.Products)
            .HasForeignKey(d => d.SupplierID)
            .HasConstraintName("FK_Products_Suppliers");
    });

    modelBuilder.Entity<Region>(entity =>
    {
        entity.HasKey(e => e.RegionID).IsClustered(false);

        entity.Property(e => e.RegionID).ValueGeneratedNever();
        entity.Property(e => e.RegionDescription)
            .IsRequired()
            .HasMaxLength(50)
            .IsFixedLength();
    });

    modelBuilder.Entity<RequestResponseLogger>(entity =>
    {
        entity.HasKey(e => e.LogId);

        entity.Property(e => e.Aplicacao)
            .IsRequired()
            .HasMaxLength(50);
        entity.Property(e => e.ExceptionMessage).IsUnicode(false);
        entity.Property(e => e.ExceptionStackTrace).IsUnicode(false);
        entity.Property(e => e.JsonString).IsUnicode(false);
        entity.Property(e => e.RequestDateTimeUtc).HasColumnType("datetime");
        entity.Property(e => e.ResponseDateTimeUtc).HasColumnType("datetime");
        entity.Property(e => e.Usuario)
            .IsRequired()
            .HasMaxLength(50);
        entity.Property(e => e.WorkItemLink).IsUnicode(false);
    });

    modelBuilder.Entity<SQLSessions>(entity =>
    {
        entity.HasKey(e => e.Id).HasName("pk_Id");

        entity.HasIndex(e => e.ExpiresAtTime, "Index_ExpiresAtTime");

        entity.Property(e => e.Id).HasMaxLength(449);
        entity.Property(e => e.Value).IsRequired();
    });

    modelBuilder.Entity<Shippers>(entity =>
    {
        entity.HasKey(e => e.ShipperID);

        entity.Property(e => e.CompanyName)
            .IsRequired()
            .HasMaxLength(40);
        entity.Property(e => e.Phone).HasMaxLength(24);
    });

    modelBuilder.Entity<Sistema>(entity =>
    {
        entity.HasKey(e => e.sis_codigo).HasAnnotation("SqlServer:FillFactor", 100);

        entity.Property(e => e.sis_descricao).IsUnicode(false);
        entity.Property(e => e.sis_nome)
            .IsRequired()
            .HasMaxLength(50)
            .IsUnicode(false);
    });

    modelBuilder.Entity<Student>(entity =>
    {
        entity.Property(e => e.Branch).IsRequired();
        entity.Property(e => e.FirstName).IsRequired();
        entity.Property(e => e.LastName).IsRequired();
    });

    modelBuilder.Entity<StudentAdress>(entity =>
    {
        entity.HasKey(e => new { e.StudentId, e.AdressId });

        entity.Property(e => e.AdressId).ValueGeneratedOnAdd();
        entity.Property(e => e.Cep)
            .IsRequired()
            .HasMaxLength(11);
        entity.Property(e => e.Cidade)
            .IsRequired()
            .HasMaxLength(50);
        entity.Property(e => e.Logradouro).IsRequired();
        entity.Property(e => e.Numero)
            .IsRequired()
            .HasMaxLength(20)
            .IsUnicode(false);

        entity.HasOne(d => d.Student).WithMany(p => p.StudentAdress)
            .HasForeignKey(d => d.StudentId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_StudentAdress_Student");
    });

    modelBuilder.Entity<Suppliers>(entity =>
    {
        entity.HasKey(e => e.SupplierID);

        entity.HasIndex(e => e.CompanyName, "CompanyName");

        entity.HasIndex(e => e.PostalCode, "PostalCode");

        entity.Property(e => e.Address).HasMaxLength(60);
        entity.Property(e => e.City).HasMaxLength(15);
        entity.Property(e => e.CompanyName)
            .IsRequired()
            .HasMaxLength(40);
        entity.Property(e => e.ContactName).HasMaxLength(30);
        entity.Property(e => e.ContactTitle).HasMaxLength(30);
        entity.Property(e => e.Country).HasMaxLength(15);
        entity.Property(e => e.Fax).HasMaxLength(24);
        entity.Property(e => e.HomePage).HasColumnType("ntext");
        entity.Property(e => e.Phone).HasMaxLength(24);
        entity.Property(e => e.PostalCode).HasMaxLength(10);
        entity.Property(e => e.Region).HasMaxLength(15);
    });

    modelBuilder.Entity<Territories>(entity =>
    {
        entity.HasKey(e => e.TerritoryID).IsClustered(false);

        entity.Property(e => e.TerritoryID).HasMaxLength(20);
        entity.Property(e => e.TerritoryDescription)
            .IsRequired()
            .HasMaxLength(50)
            .IsFixedLength();

        entity.HasOne(d => d.Region).WithMany(p => p.Territories)
            .HasForeignKey(d => d.RegionID)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_Territories_Region");
    });

    modelBuilder.Entity<TipoMensagens>(entity =>
    {
        entity.Property(e => e.ID).ValueGeneratedNever();
        entity.Property(e => e.Descricao)
            .IsRequired()
            .HasMaxLength(50);
    });

    OnModelCreatingPartial(modelBuilder);
}

partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}